# aur/picom-ibhagwan-git 


#
# Shadows
#

shadow = true;
# The blur radius for shadows, in pixels. (defaults to 12)
shadow-radius = 25;
# The opacity of shadows. (0.0 - 1.0, defaults to 0.75)
shadow-opacity = 0.5;
# The left offset for shadows, in pixels. (defaults to -15)
shadow-offset-x = -25;
# The top offset for shadows, in pixels. (defaults to -15)
shadow-offset-y = -2;
# Do not paint shadows on shaped windows
shadow-ignore-shaped = true;
# Specify a lise of conditions of windows
# that should have no shadow
shadow-exclude = [
	"window_type = 'desktop'",
#	"window_type = 'toolbar'",
#	"window_type = 'menu'",
#	"window_type = 'utility'",
#	"window_type = 'splash'",
#	"window_type = 'dialog'"
	"window_type = 'notification'",
	"window_type = 'tooltip'"
#	"window_type = 'dropdown_menu'",
#	"window_type = 'dnd'",
#	"window_type = 'combo'",
#	"class_g = 'firefox' && argb"
];

#
# Fading
#

fading = true;
# Opacity change between steps while fading in. (0.01 - 1.0, defaults to 0.028)
fade-in-step = 0.029;
# Opacity change between steps while fading out. (0.01 - 1.0, defaults to 0.03)
fade-out-step = 0.029;
# The time between steps in fade step, in milliseconds. (> 0, defaults to 10)
fade-delta = 5;
# Do not fade on window open/close
no-fading-openclose = false;
# Do not fade destroyed ARGB windows with WM frame. Workaround of bugs in Openbox, Fluxbox, etc.
no-fading-destroyed-argb = false;
# Specify a list of conditions of windows 
# that sould not be faded
#fade-exclude = [
#	"window_type = 'desktop'",
#	"window_type = 'toolbar'",
#	"window_type = 'menu'",
#	"window_type = 'utility'",
#   "window_type = 'splash'",
#   "window_type = 'dialog'",
#   "window_type = 'notification'",
#   "window_type = 'tooltip'",
#   "window_type = 'dropdown_menu'",
#	"window_type = 'dnd'",
#	"window_type = 'combo'"
#];

#
# Opacity
#

# Opacity of inactive windows. (0.1 - 1.0, defaults to 1.0)
inactive-opacity = 1.0;
# Opacity of window titlebars and borders. (0.1 - 1.0, disabled by default)
frame-opacity = 1.0;
# Let inactive opacity set by -i override the '_NET_WM_OPACITY' values of windows.
inactive-opacity-override = false;
# Default opacity for active windows. (0.0 - 1.0, defaults to 1.0)
active-opacity = 1.0;
# Dim inactive windows. (0.0 - 1.0, defaults to 0.0)
inactive-dim = 0.0;
# Detect _NET_WM_OPACITY on client windows, useful for wms
# not passing _NET_WM_OPACITY of client windows to frame windows
detect-client-opacity = true;
# Specify a list of opacity rules, in the format
# PERCENT:PATTERN, like 50:name *= "Firefox".
# picom-trans is recommended over this. Note we don't
# make any guarantee ablut possible conflicts with
# oteher programs that set _NET_WM_WINDOW_OPACITY on
# frame or client windows
opacity-rule = [
	"95:class_g = 'Alacritty'"
];

#
# Corners
#

# Round the corners of windows, default 0
corner-radius = 5;
# Exclude conditions for rounded corners
rounded-corners-exclude = [
	"window_type = 'desktop'",
	"window_type = 'toolbar'",
	"window_type = 'menu'",
	"window_type = 'utility'",
	"window_type = 'splash'",
	"window_type = 'dialog'",
#	"window_type = 'notification'",
	"window_type = 'tooltip'",
	"window_type = 'dropdown_menu'",
	"window_type = 'dnd'",
	"window_type = 'combo'",
	"class_g = 'Polybar'"
];
# When rounding corners, Round the borders of windows
# default 1
round-borders = 1;
# Exclude conditions for rounding borders
round-bordres-exclude = [
	"window_type = 'desktop'",
	"window_type = 'toolbar'",
	"window_type = 'menu'",
	"window_type = 'utility'",
	"window_type = 'splash'",
	"window_type = 'dialog'",
	"window_type = 'notification'",
	"window_type = 'tooltip'",
	"window_type = 'dropdown_menu'",
	"window_type = 'dnd'",
	"window_type = 'combo'"
];
# Try to detect windows with rounded corners and
# dont consider them shaped windows
detect-rounded-corners = true;

#
# Blur
#

# Parameters for background blurring.
blur-method = "box";
blur-strength = 10; 
#blur-deviation =
# Blur background of semi-transparent / ARGB windows.
# Bad in performance, with driver-dependent behavior.
blur-background = true;
# Blur backgorund of windows when the window
# frame is not opaque. Bad in performance.
blur-background-frame = true;
# Exclude conditions for background blur.
blur-background-exclude = [
#	"window_type = 'desktop'",
#	"window_type = 'toolbar'",
#	"window_type = 'menu'",
#	"window_type = 'utility'",
#	"window_type = 'splash'",
#	"window_type = 'dialog'",
#	"window_type = 'notification'",
#	"window_type = 'tooltip'",
#	"window_type = 'dropdown_menu'",
#	"window_type = 'dnd'",
#	"window_type = 'combo'",
#	"_GTK_FRAME_EXTENTS@:c"
];

#
# Backend
#
 
backend = "glx";
# Disable the use of damage information.
# This cause the whole screen to be redrawn everytime, instead of the part of the screen
# has actually changed. Potentially degrades the performance, but might fix some artifacts.
# The opposing option is use-damage
#
#no-use-damage = false;
#use-damage = true;
# Try to detectl WM windows (
# a non-override-redirect window with no child that has  WM_STATE)
# and mark them as active
mark-wmwin-focused = true;
# Mark override-redirect windows that doesn't
# have a child window with WM_STATE focused
makr-ovredir-focused = true;
# Specify refresh rate of the screen. If not specified
# or 0, picom will ty detecting this with X RandR ext.
refresh-rate = 0;
# Enable/desable VSynci
vsync = false;
# Unredirect all windows if a full-screen opaque window
# is detected, to maximize performance for full-screen windows.
unredir-if-possible = true;
# Conditions of windows that shouldn't be considered
# full-screen for unredirecting screen.
unredir-if-possible-exclude = [
#	"window_type = 'dock'",
	"window_type = 'desktop'"
];
# Specify a list of conditions of windows
# that should always be considered focused
focus-exclude = [
#	"window_type = 'dock'",
	"window_type = 'desktop'"
];
# Resize damaged region by a specific number of pixels.
# A positive value nelarges it while a negative one shrinks it.
# If the value is positive, thos additional pexels will
# not be actually painted to screen, only used in blur
# calculation, and such. (Due to technical limitations,
# with --use-damage, those pixels will still be 
# incorrectly painted to screen.) My or may not work
# with --glx-no-stencil. Shrinking doesn't function correctly.
#use-damage = false;
#resize-damage = INTEGER;
# Specify a list of conditions of windows that should be
# painted with invertd color. Resource-hogging, and is not well tested
#invert-color-include = [];
# Aboid using stencil buffer, useful
# if you dont have a stencil buffer. Myght cause
# incorrect opacity when rendering transparent content
# (baut never practicalyy happened) and may
# not work with --blur-background. My test show a 15%
# performanca boost. Recommended.
#glx-no-stencil = true;
# Aboid rebinding pixmap on window damage.
# Probably could improve performance on 
# rapid window conten changes, but is known 
# to break thing on some drivers (xf86-video-intel, etc)
# Recommended if it works.
#glx-no-rebind-pixmap = true;
# Use X Sync fence to sync clients' draw calls, to make sure all draw
# calls are finished before picom starts drawing. Needed on nvidia-drivers
# with GLX backend for some users.
# SHOULD ALWAYS BE ENABLE ON NVIDIA CARDS
xrender-sync-fence = true;
